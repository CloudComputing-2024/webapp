#
# JDBC properties
#spring.datasource.url=jdbc:mysql://127.0.0.1:3306/web_application?createDatabaseIfNotExist=true
#spring.datasource.username=webapplication
#spring.datasource.password=webapplication


##CLOUD-SQL-CONFIGURATIONS
#spring.datasource.url=jdbc:mysql://10.229.0.2:3306/web_application?createDatabaseIfNotExist=true
spring.datasource.url=jdbc:mysql:///webapp?cloudSqlInstance=dev-project-415121:us-central1:private-instance-9de31436&socketFactory=com.google.cloud.sql.mysql.SocketFactory
spring.cloud.gcp.sql.database-name=webapp
#spring.cloud.gcp.sql.instance-connection-name=dev-project-415121:us-west1:test-instance
# So app starts despite "table already exists" errors.
# Enforces database initialization
spring.sql.init.mode= always
spring.datasource.username=webapp
spring.datasource.password=123
#spring.cloud.gcp.project-id=dev-project-415121
#spring.cloud.gcp.credentials.location=[PATH FOR THE JSON FILE]
# Specifies JDBC driver class that Spring boot should connect
spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
#spring.cloud.gcp.credentials.location=/Users/amy/Downloads/dev-project-415121-94fe4ad511f6.json

#
# Specifies the dialect of SQL
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
spring.datasource.hikari.connection-timeout=500
#
# Tells spring boot continue initializing the database even of error execute
spring.sql.init.continue-on-error=true

# Add logging configs to display SQL statements
logging.level.root = info
logging.level.org.hibernate.SQL = debug
logging.level.org.hibernate.orm.jdbc.bind = trace

# Configure Hibernate to auto create the table
spring.jpa.hibernate.ddl-auto=create-drop

spring.main.banner-mode=off
#logging.level.root=warn
spring.jpa.open-in-view=false

server.compression.enabled=true
server.compression.mime-types=application/json,application/xml,text/html,text/xml,text/plain,application/javascript,text/css

