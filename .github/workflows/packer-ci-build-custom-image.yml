name: Packer CI Build Custom Image

on:
  push:
    branches:
      - main

jobs:
  packer-ci-build-custom-image:
    runs-on: ubuntu-latest

    env:
      DB_DATABASE: web_application
      DB_USER: webapplication
      DB_PASSWORD: webapplication
      PROJECT_ID: ${{secrets.PROJECT_ID}}
      VM_KEY: ${{secrets.VM_KEY}}
      SERVICE_ACCOUNT: ${{secrets.SERVICE_ACCOUNT}}
      CLOUD_SQL_INSTANCE: ${{secrets.CLOUD_SQL_INSTANCE}}
      KMS_KEY: ${{secrets.KMS_KEY}}

    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup gcloud CLI
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.PACKER_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Use gcloud CLI
        run: gcloud info

      - name: Start MySQL
        run: |
          sudo /etc/init.d/mysql start

      - name: Create User and Database
        run: |
          mysql -e "CREATE USER '$DB_USER'@'localhost' IDENTIFIED BY '$DB_PASSWORD';" -uroot -proot
          mysql -e "CREATE DATABASE IF NOT EXISTS $DB_DATABASE;" -uroot -proot
          mysql -e "GRANT ALL PRIVILEGES ON *.* TO '$DB_USER'@'localhost';" -uroot -proot
          mysql -e "FLUSH PRIVILEGES;" -uroot -proot

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'oracle'
          cache: maven

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Create Log Directory
        run: |
          sudo mkdir -p /var/log/webapp
          sudo chmod 777 /var/log/webapp

      - name: Run integration tests
        run: mvn test -Dtest=UserRestControllerIntegrationTests

      - name: Build application artifact
        run: |
          mvn clean package

      - name: Zip artifacts
        run: |
          cd target
          zip -r ../webapp.zip *.jar

      - name: Create webapp directory placeholder
        run: mkdir -p packer/webapp
        working-directory: .

      - name: Prepare artifacts for Packer
        run: |
          mv webapp.zip ./packer/webapp

      - name: Build custom image with Packer
        run: |
          packer init .
          packer build -var-file=variables.pkrvars.hcl gcp.pkr.hcl
        working-directory: ./packer

      - name: Get the image name
        run: |
          IMAGE_NAME=$(gcloud compute images list --filter="name~'dev-project-custom-image-.*'" --sort-by="~creationTimestamp" --limit=1 --format="get(name)")
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - name: Generate random password
        run: |
          sudo apt-get install -y pwgen
          PASSWORD=$(pwgen -s 8 1)
          echo "RANDOM_PASSWORD=$PASSWORD" >> $GITHUB_ENV

      - name: Create startup script
        run: |
          sudo echo '#!/bin/bash' > startup-script.sh
          sudo echo 'set -e' >> startup-script.sh 
          sudo echo "spring.datasource.url=jdbc:mysql://google/webapp?cloudSqlInstance=${{env.CLOUD_SQL_INSTANCE}}&socketFactory=com.google.cloud.sql.mysql.SocketFactory" >> startup-script.sh
          sudo echo "spring.cloud.gcp.sql.database-name=webapp" >> startup-script.sh
          sudo echo "spring.datasource.username=webapp" >> startup-script.sh
          sudo echo "spring.sql.init.mode=never" >> startup-script.sh  
          sudo echo "spring.datasource.password=${{env.RANDOM_PASSWORD}}" >> startup-script.sh
          sudo echo "GOOGLE_CLOUD_PROJECT=${{env.PROJECT_ID}}" >> startup-script.sh
          sudo echo "PUBSUB_TOPIC=verify_email" >> startup-script.sh

      - name: Create new instance template
        run: |
          gcloud compute instance-templates create dev-project-instance-template-${GITHUB_SHA:0:8} \
            --image=${{ env.IMAGE_NAME }} \
            --region=us-west1 \
            --machine-type=e2-standard-2 \
            --tags=allow-https,allow-health-check,disallow-ssh \
            --metadata-from-file startup-script=startup-script.sh \
            --service-account=${{ env.SERVICE_ACCOUNT }} \
            --scopes=cloud-platform \
            --boot-disk-size=10GB\
            --boot-disk-type=pd-standard\
            --boot-disk-kms-key=${{ env.KMS_KEY }}

      - name: Recreate instances in managed instance group
        run: |
          gcloud compute instance-groups managed rolling-action replace webapp-igm --region=us-west1 --max-unavailable=1 --replacement-method=recreate

      - name: Wait for instances to be recreated
        run: |
          gcloud compute instance-groups managed wait-until-stable webapp-igm --region=us-west1